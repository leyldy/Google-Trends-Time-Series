acf(arim1$residuals)
acf(arima1$residuals)
acf(arima1$residuals, type = "l")
acf(arima1$residuals, lag.max = 500)
sfit.ic2.matrix <- icTest(season.fit$residuals, p = 3, d = 1, q = 3, P = 0, D = 0, Q = 0)
sfit.ic2.matrix
arima4 <- arima(season.fit$residuals, order = c(2,1,2),
seasonal = list(order = c(0,0,0), period = 52))
arima5 <- arima(season.fit$residuals, order = c(1,1,3),
seasonal = list(order = c(0,0,0), period = 52))
arima5 <- arima(season.fit$residuals, order = c(0,1,1),
seasonal = list(order = c(0,0,0), period = 52))
new.all.models <- list(arima4, arima5, arima6)
new.all.iv <-
lapply(new.all.models, function(model){
return(Box.test(model$residuals, lag = 104, fitdf = length(model$coef)))
})
arima4 <- arima(season.fit$residuals, order = c(2,1,2),
seasonal = list(order = c(0,0,0), period = 52))
arima5 <- arima(season.fit$residuals, order = c(1,1,3),
seasonal = list(order = c(0,0,0), period = 52))
arima6 <- arima(season.fit$residuals, order = c(0,1,1),
seasonal = list(order = c(0,0,0), period = 52))
new.all.models <- list(arima4, arima5, arima6)
new.all.iv <-
lapply(new.all.models, function(model){
return(Box.test(model$residuals, lag = 104, fitdf = length(model$coef)))
})
new.all.iv
plot(arima5$residuals)
acf(arima5$residuals)
acf(arima5$residuals, lag.max = 500)
sfit.ic2.matrix <- icTest(season.fit$residuals, p = 3, d = 0, q = 3, P = 0, D = 0, Q = 0)
sfit.ic2.matrix
arima4 <- arima(season.fit$residuals, order = c(2,0,2),
seasonal = list(order = c(0,0,0), period = 52))
arima5 <- arima(season.fit$residuals, order = c(1,0,3),
seasonal = list(order = c(0,0,0), period = 52))
arima6 <- arima(season.fit$residuals, order = c(0,0,1),
seasonal = list(order = c(0,0,0), period = 52))
new.all.models <- list(arima4, arima5, arima6)
new.all.iv <-
lapply(new.all.models, function(model){
return(Box.test(model$residuals, lag = 104, fitdf = length(model$coef)))
})
new.all.iv
acf(arima5$residuals)
acf(arima5$residuals, lag.max = 500)
acf(season.fit$reisduals)
acf(season.fit$residuals)
acf(season.fit$residuals, lag.max = 500)
tsCV <- function(ts, order, sorder = c(0,0,0), type, k){
all_mses <- c()
for(i in (10-k-1):8){
train <- ts[1:(i*52), ]
test <-  ts[(i*52+1):((i+2)*52), ]
if(type == "resids"){
param.fit <- loess(log.activity ~ Xt, data = train,
control = loess.control(surface = "direct"),
span = 0.6, degree = 1)
periodos <-
abs(fft(param.fit$residuals)/sqrt(length(param.fit$residuals)))^2
names(periodos) <- (1:length(periodos) - 1) / length(param.fit$residuals)
end.periodos <- ceiling(nrow(train) / 2)
num.periods <- floor(0.08*nrow(train))
coeffs <- sort(periodos[2:end.periodos], decreasing = T)[1:num.periods]
freqs <- as.numeric(names(coeffs))
season.fit.df <- sinusoid(start = 1, end = i*52,  freqs = freqs)
season.fit.df["y"] <- param.fit$residuals
season.fit <- lm(y ~., data = season.fit.df)
sresids.model <- arima(season.fit$residuals, order = order,
seasonal = list(order = sorder, period = 52))
sresids.fcast <- predict(sresids.model, n.ahead = 104)
s.fitted <- predict(season.fit,
newdata = sinusoid(start = (i*52+1), end = (i+2)*52,
freqs = freqs))
p.fitted <- predict(param.fit,
newdata = data.frame(Xt = test$Xt))
predicted.val <- p.fitted + s.fitted + sresids.fcast$pred
}
if(type == "diff"){
arima.model <- arima(train$log.activity, order = order,
seasonal = list(order = sorder, period = 52),
method = "CSS-ML")
arima.fcast <- predict(arima.model, n.ahead = 104)
predicted.val <- arima.fcast$pred
}
mses <- (test$activity - (exp(predicted.val) - 2))^2
all_mses <- c(all_mses, mean(mses))
}
return(all_mses)
}
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(0,0 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(1,0,3), sorder = c(0, 0 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(2,0,2), sorder = c(0, 0 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(0,0,2), sorder = c(0, 0 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(0, 0 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sresids.model <- arima(season.fit$residuals, order = c(1,1,3),
seasonal = list(order = c(0,0,0), period = 52))
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(0, 1 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(1, 1 ,0),
type = "resids", k= 4)
mean(sfit.all_mses)
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(1, 1 ,1),
type = "resids", k= 4)
mean(sfit.all_mses)
setwd("~/Desktop/School/STAT153/midterm2")
data <- read.csv("q3/q3_train.csv", stringsAsFactors = F) #Note it is weekly data
data["Xt"] <- seq(1:nrow(data))
plot(data$Xt, data$activity, main = "Initial Plot", type = "l")
data["log.activity"] <- log(2 + data$activity)
plot(data$log.activity, type = "l", main = "Log+2-Transformed Activity")
data['sqrt.activity'] <- sqrt(data$activity + 2)
plot(data$sqrt.activity, type = "l")
local_maxes <- sapply(seq(1, nrow(data), by = 50), function(x){
if(x + 50 > nrow(data)){
return(which.max(data$activity[x:nrow(data)]) + x - 1)
}
else{
return(which.max(data$activity[x:(x+50)]) + x - 1)
}
})
mean(diff(local_maxes))
param.fit <- loess(log.activity ~ Xt, data = data,
span = 0.5, degree = 2)
plot(data$log.activity, type = "l")
lines(param.fit$fitted, col = "red")
plot(param.fit$residuals, type = 'l')
acf(param.fit$residuals, lag.max = 500)
sinusoid <- function(start, end, freqs){
t <- start:end
df <- matrix(NA, nrow = length(t), ncol = length(freqs) * 2)
for(i in 1:length(freqs)){
df[ , 2*i] <- cos(2 * pi * freqs[i] * t)
df[ , (2*i-1)] <- sin(2*pi*freqs[i]*t)
}
return(as.data.frame(df))
}
periodos <-
abs(fft(param.fit$residuals)/sqrt(length(param.fit$residuals)))^2
names(periodos) <- (1:length(periodos) - 1) / length(param.fit$residuals)
end.periodos <- ceiling(nrow(data) / 2)
num.periods <- floor(0.3*nrow(data))
coeffs <- sort(periodos[2:end.periodos], decreasing = T)[1:num.periods]
freqs <- as.numeric(names(coeffs))
season.fit.df <- sinusoid(start = 1, end = nrow(data),  freqs = freqs)
season.fit.df["y"] <- param.fit$residuals
season.fit <- lm(y ~., data = season.fit.df)
plot(season.fit$fitted.values + param.fit$fitted, type = "l")
lines(data$log.activity, col = "red")
acf(season.fit$residuals, lag.max = 500)
icTest = function(ts, p, d, q, P=0, D = 0, Q=0){
aicmatrix = matrix(NA, (p+1), (q+1))
bicmatrix = matrix(NA, (p+1), (q+1))
for(a in 0:p){
for(b in 0:q){
model <- tryCatch(arima(ts, order = c(a,d,b),
seasonal = list(order = c(P,D,Q), period = 52)),
simpleError = function(e) e)
if(inherits(model, "simpleError")){
model <- tryCatch(arima(ts, order = c(a,d,b),
seasonal = list(order = c(P,D,Q), period = 52),
method = "ML"),
simpleError = function(e) e)
}
if(inherits(model, "simpleError")){
next
}
aicmatrix[a+1, b+1] = model$aic
bicmatrix[a+1, b+1] = BIC(model)
}
}
return(list(aic = aicmatrix, bic = bicmatrix))
}
final.arima <- arima(season.fit$residuals, order = c(1,1,3),
seasonal = list(order = c(1,1,0), period = 52))
final.arima
arima.fcast <- predict(final.arima, n.ahead = 104)
final.s.fitted <- predict(season.fit,
newdata = sinusoid(start = (526), end = 629,
freqs = freqs))
final.p.fitted <- predict(param.fit, newdata = data.frame(Xt = 526:629))
final.predicted.val <-
as.numeric(arima.fcast$pred + final.s.fitted + final.p.fitted)
final.predicted.val <- exp(final.predicted.val) - 2
plot(data$activity, type = "l", col = "green",
main = "Predicted Time Series Data", xlim = c(0, 650))
lines(526:629, final.predicted.val, col = "red")
write(final.predicted.val, file = "q3/Q3_Jong_Lee_25344865.txt", sep = ",",
ncol = 1)
lines(526:629, final.predicted.val, col = "red")
final.predicted.val
arima.fcast
final.s.fitted <- predict(season.fit,
newdata = sinusoid(start = (526), end = 629,
freqs = freqs))
final.s.fitted
final.p.fitted <- predict(param.fit, newdata = data.frame(Xt = 526:629))
param.fit
rm(list=ls())
setwd("~/Desktop/School/STAT153/midterm2")
data <- read.csv("q3/q3_train.csv", stringsAsFactors = F) #Note it is weekly data
data["Xt"] <- seq(1:nrow(data))
plot(data$Xt, data$activity, main = "Initial Plot", type = "l")
data["log.activity"] <- log(2 + data$activity)
plot(data$log.activity, type = "l", main = "Log+2-Transformed Activity")
data['sqrt.activity'] <- sqrt(data$activity + 2)
plot(data$sqrt.activity, type = "l")
local_maxes <- sapply(seq(1, nrow(data), by = 50), function(x){
if(x + 50 > nrow(data)){
return(which.max(data$activity[x:nrow(data)]) + x - 1)
}
else{
return(which.max(data$activity[x:(x+50)]) + x - 1)
}
})
mean(diff(local_maxes))
param.fit <- loess(log.activity ~ Xt, data = data,
span = 0.5, degree = 2,
control = loess.control(surface = "direct"))
plot(data$log.activity, type = "l")
lines(param.fit$fitted, col = "red")
plot(param.fit$residuals, type = 'l')
acf(param.fit$residuals, lag.max = 500)
sinusoid <- function(start, end, freqs){
t <- start:end
df <- matrix(NA, nrow = length(t), ncol = length(freqs) * 2)
for(i in 1:length(freqs)){
df[ , 2*i] <- cos(2 * pi * freqs[i] * t)
df[ , (2*i-1)] <- sin(2*pi*freqs[i]*t)
}
return(as.data.frame(df))
}
periodos <-
abs(fft(param.fit$residuals)/sqrt(length(param.fit$residuals)))^2
names(periodos) <- (1:length(periodos) - 1) / length(param.fit$residuals)
end.periodos <- ceiling(nrow(data) / 2)
num.periods <- floor(0.3*nrow(data))
coeffs <- sort(periodos[2:end.periodos], decreasing = T)[1:num.periods]
freqs <- as.numeric(names(coeffs))
season.fit.df <- sinusoid(start = 1, end = nrow(data),  freqs = freqs)
season.fit.df["y"] <- param.fit$residuals
season.fit <- lm(y ~., data = season.fit.df)
plot(season.fit$fitted.values + param.fit$fitted, type = "l")
lines(data$log.activity, col = "red")
acf(season.fit$residuals, lag.max = 500)
tsCV <- function(ts, order, sorder = c(0,0,0), type, k){
all_mses <- c()
for(i in (10-k-1):8){
train <- ts[1:(i*52), ]
test <-  ts[(i*52+1):((i+2)*52), ]
if(type == "resids"){
param.fit <- loess(log.activity ~ Xt, data = train,
control = loess.control(surface = "direct"),
span = 0.6, degree = 1)
periodos <-
abs(fft(param.fit$residuals)/sqrt(length(param.fit$residuals)))^2
names(periodos) <- (1:length(periodos) - 1) / length(param.fit$residuals)
end.periodos <- ceiling(nrow(train) / 2)
num.periods <- floor(0.08*nrow(train))
coeffs <- sort(periodos[2:end.periodos], decreasing = T)[1:num.periods]
freqs <- as.numeric(names(coeffs))
season.fit.df <- sinusoid(start = 1, end = i*52,  freqs = freqs)
season.fit.df["y"] <- param.fit$residuals
season.fit <- lm(y ~., data = season.fit.df)
sresids.model <- arima(season.fit$residuals, order = order,
seasonal = list(order = sorder, period = 52))
sresids.fcast <- predict(sresids.model, n.ahead = 104)
s.fitted <- predict(season.fit,
newdata = sinusoid(start = (i*52+1), end = (i+2)*52,
freqs = freqs))
p.fitted <- predict(param.fit,
newdata = data.frame(Xt = test$Xt))
predicted.val <- p.fitted + s.fitted + sresids.fcast$pred
}
if(type == "diff"){
arima.model <- arima(train$log.activity, order = order,
seasonal = list(order = sorder, period = 52),
method = "CSS-ML")
arima.fcast <- predict(arima.model, n.ahead = 104)
predicted.val <- arima.fcast$pred
}
mses <- (test$activity - (exp(predicted.val) - 2))^2
all_mses <- c(all_mses, mean(mses))
}
return(all_mses)
}
sfit.all_mses <- tsCV(ts = data, order = c(1,1,3), sorder = c(1, 1 ,0),
type = "resids", k= 4)
```{r, eval = F, echo = T}
mean(sfit.all_mses)
final.arima <- arima(season.fit$residuals, order = c(1,1,3),
seasonal = list(order = c(1,1,0), period = 52))
arima.fcast <- predict(final.arima, n.ahead = 104)
final.s.fitted <- predict(season.fit,
newdata = sinusoid(start = (526), end = 629,
freqs = freqs))
final.p.fitted <- predict(param.fit, newdata = data.frame(Xt = 526:629))
final.predicted.val <-
as.numeric(arima.fcast$pred + final.s.fitted + final.p.fitted)
plot(data$activity, type = "l", col = "green",
main = "Predicted Time Series Data", xlim = c(0, 650))
lines(526:629, final.predicted.val, col = "red")
write(final.predicted.val, file = "q3/Q3_Jong_Lee_25344865.txt", sep = ",",
ncol = 1)
```{r}
flist = c('predictions/Q1_Jong_Lee_25344865.txt', 'predictions/Q2_Jong_Lee_25344865.txt', 'predictions/Q3_Jong_Lee_25344865.txt', 'predictions/Q4_Jong_Lee_25344865.txt', 'predictions/Q5_Jong_Lee_25344865.txt')
sublist = lapply(flist, extract_sub)
set.seed(0)
true_process = matrix(rnorm(104 * 5), 104, 5)
flist = c('predictions/Q1_Jong_Lee_25344865.txt', 'predictions/Q2_Jong_Lee_25344865.txt', 'predictions/Q3_Jong_Lee_25344865.txt', 'predictions/Q4_Jong_Lee_25344865.txt', 'predictions/Q5_Jong_Lee_25344865.txt')
extract_sub = function(fname){
robj = NULL
tryCatch({
stopifnot(file.exists(fname))
# reading file
# this command would work if a header is present
fi = as.numeric(drop(as.matrix(read.csv(fname))))
stopifnot(length(fi) %in% c(103, 104))
if(length(fi) == 103) {
# rerunning without header
fi = drop(as.matrix(read.csv(fname, header = FALSE)))
stopifnot(length(fi) == 104)
}
# extracting student information
pos_ = as.vector(gregexpr('_', fname)[[1]])
pos. = as.vector(gregexpr('\\.', fname)[[1]])
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
stopifnot(is.numeric(sid))
qid = as.numeric(substr(fname, 2, 2))
stopifnot(is.numeric(qid))
sname = substr(fname, head(pos_,1)+1, tail(pos_,1)-1)
# returning everything
robj = list(predictions = fi,
mse = mean((true_process[,qid] - fi)^2),
qid = qid, sid = sid, sname = sname)
}, error = function(e) {print(fname); print(e)})
return(robj)
}
sublist = lapply(flist, extract_sub)
sublist
flist = 'predictions/Q1_Jong_Lee_25344865.txt'
sublist = lapply(flist, extract_sub)
flist = 'predictions/Q5_Jong_Lee_25344865.txt'
sublist = lapply(flist, extract_sub)
sublist
flist = 'predictions/Q5_Jong_Lee_25344865.txt'
sublist = lapply(flist, extract_sub)
sublist
true_process = matrix(rnorm(104 * 5), 104, 5)
rm(list=ls())
flist = 'q5/Q5_Jong_Lee_25344865.txt'
set.seed(0)
true_process = matrix(rnorm(104 * 5), 104, 5)
flist = 'q5/Q5_Jong_Lee_25344865.txt'
extract_sub = function(fname){
robj = NULL
tryCatch({
stopifnot(file.exists(fname))
# reading file
# this command would work if a header is present
fi = as.numeric(drop(as.matrix(read.csv(fname))))
stopifnot(length(fi) %in% c(103, 104))
if(length(fi) == 103) {
# rerunning without header
fi = drop(as.matrix(read.csv(fname, header = FALSE)))
stopifnot(length(fi) == 104)
}
# extracting student information
pos_ = as.vector(gregexpr('_', fname)[[1]])
pos. = as.vector(gregexpr('\\.', fname)[[1]])
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
stopifnot(is.numeric(sid))
qid = as.numeric(substr(fname, 2, 2))
stopifnot(is.numeric(qid))
sname = substr(fname, head(pos_,1)+1, tail(pos_,1)-1)
# returning everything
robj = list(predictions = fi,
mse = mean((true_process[,qid] - fi)^2),
qid = qid, sid = sid, sname = sname)
}, error = function(e) {print(fname); print(e)})
return(robj)
}
sublist = lapply(flist, extract_sub)
sublist
flist = 'predictions/Q5_Jong_Lee_25344865.txt'
sublist = lapply(flist, extract_sub)
getwd()
flist = 'predictions/Q3_Jong_Lee_25344865.txt'
flist = 'q3/Q3_Jong_Lee_25344865.txt'
student_list = unique(sapply(sublist, function(ss) return(ss$sid)))
student_list
sublist = lapply(flist, extract_sub)
sublist
flist = 'predictions/Q3_Jong_Lee_25344865.txt'
sublist = lapply(flist, extract_sub)
sublist
substring(flist)
substring(flist, 2, 2)
flist
set.seed(0)
true_process = matrix(rnorm(104 * 5), 104, 5)
flist = 'predictions/Q4_Jong_Lee_25344865.txt'
extract_sub = function(fname){
robj = NULL
tryCatch({
stopifnot(file.exists(fname))
# reading file
# this command would work if a header is present
fi = as.numeric(drop(as.matrix(read.csv(fname))))
stopifnot(length(fi) %in% c(103, 104))
if(length(fi) == 103) {
# rerunning without header
fi = drop(as.matrix(read.csv(fname, header = FALSE)))
stopifnot(length(fi) == 104)
}
# extracting student information
pos_ = as.vector(gregexpr('_', fname)[[1]])
pos. = as.vector(gregexpr('\\.', fname)[[1]])
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
stopifnot(is.numeric(sid))
qid = as.numeric(substr(fname, 2, 2))
stopifnot(is.numeric(qid))
sname = substr(fname, head(pos_,1)+1, tail(pos_,1)-1)
# returning everything
robj = list(predictions = fi,
mse = mean((true_process[,qid] - fi)^2),
qid = qid, sid = sid, sname = sname)
}, error = function(e) {print(fname); print(e)})
return(robj)
}
sublist = lapply(flist, extract_sub)
fi = as.numeric(drop(as.matrix(read.csv(flist))))
fi
flist = 'predictions/Q5_Jong_Lee_25344865.txt'
fi = as.numeric(drop(as.matrix(read.csv(flist))))
fi
read.csv(flist, header = F)
fi = as.numeric(drop(as.matrix(read.csv(fname))))
fname = flist
fi = as.numeric(drop(as.matrix(read.csv(fname))))
stopifnot(length(fi) %in% c(103, 104))
if(length(fi) == 103) {
# rerunning without header
fi = drop(as.matrix(read.csv(fname, header = FALSE)))
stopifnot(length(fi) == 104)
}
fi
pos_ = as.vector(gregexpr('_', fname)[[1]])
pos_
pos. = as.vector(gregexpr('\\.', fname)[[1]])
pos.
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
sid
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
sid
stopifnot(is.numeric(sid))
qid = as.numeric(substr(fname, 2, 2))
qid
substr(fname)
substr(fname, start = 2, end = 2)
substr(fname, 2,2)
?substr
fname
setwd("~/Desktop/School/STAT153/midterm2/predictions")
flist = 'Q4_Jong_Lee_25344865.txt'
extract_sub = function(fname){
robj = NULL
tryCatch({
stopifnot(file.exists(fname))
# reading file
# this command would work if a header is present
fi = as.numeric(drop(as.matrix(read.csv(fname))))
stopifnot(length(fi) %in% c(103, 104))
if(length(fi) == 103) {
# rerunning without header
fi = drop(as.matrix(read.csv(fname, header = FALSE)))
stopifnot(length(fi) == 104)
}
# extracting student information
pos_ = as.vector(gregexpr('_', fname)[[1]])
pos. = as.vector(gregexpr('\\.', fname)[[1]])
sid = as.numeric(substr(fname, tail(pos_,1)+1, pos.-1))
stopifnot(is.numeric(sid))
qid = as.numeric(substr(fname, 2, 2))
stopifnot(is.numeric(qid))
sname = substr(fname, head(pos_,1)+1, tail(pos_,1)-1)
# returning everything
robj = list(predictions = fi,
mse = mean((true_process[,qid] - fi)^2),
qid = qid, sid = sid, sname = sname)
}, error = function(e) {print(fname); print(e)})
return(robj)
}
sublist = lapply(flist, extract_sub)
problem_indices = which(sapply(sublist, is.null))
sublist
flist = c('Q1_Jong_Lee_25344865.txt','Q2_Jong_Lee_25344865.txt','Q3_Jong_Lee_25344865.txt','Q4_Jong_Lee_25344865.txt', 'Q5_Jong_Lee_25344865.txt')
sublist = lapply(flist, extract_sub)
sublist
